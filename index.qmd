---
title: "What is the cause of the increase in UFO sightings?"

from: markdown+emoji
format:
  html:
    code-fold: true
jupyter: python3
---
## And can we see it in the data?


Since the beginning of the 20th century we have reported UFO sightings. What this project is trying to do is to look at the trend of the UFO sightings and try to explain them in a way which is not attributed to an increase in actual UFOs. Since a major part of the sightings are in the US (which already debunks the idea of UFOs actually being aliens) we are only focusing on that data.

### Time series plot
The first thing relevant to look at is the development of number of UFO sightings over the last decade. The first sighting in the data set is from 1910. But since they are so few sightings we choose to look at sightings from 1950 to 2014. Other than the number of sightings we also look at different popular shows and movies of different years to see if we might see their impact

```{python}
import pandas as pd
from bokeh.plotting import figure, show
from bokeh.io import output_notebook
from bokeh.models import ColumnDataSource, HoverTool, LabelSet
from bokeh.palettes import Category20

# Render inline
output_notebook()

# === Load & preprocess ===
data = pd.read_csv("data/complete.csv", on_bad_lines='skip')
data["datetime"] = pd.to_datetime(data["datetime"], errors="coerce")
df = (
    data[data["country"].str.lower() == "us"]
    .dropna(subset=["datetime", "shape"])
    .copy()
)
df["year"] = df["datetime"].dt.year

# === Totals from 1990–2014 ===
totals = df.groupby("year").size()
totals = totals[(totals.index >= 1990) & (totals.index <= 2014)]

# === Shape pivot from 1990–2014 ===
shape_counts_all = df.groupby(["year", "shape"]).size().unstack(fill_value=0)
shape_counts_all = shape_counts_all[
    (shape_counts_all.index >= 1990) &
    (shape_counts_all.index <= 2014)
]

# === Top 5 shapes + “uncommon shapes” ===
shape_totals = shape_counts_all.sum().sort_values(ascending=False)
top_shapes    = shape_totals.head(5).index
other_shapes  = shape_totals.index.difference(top_shapes)

shape_counts = shape_counts_all[top_shapes].copy()
shape_counts["uncommon shapes"] = shape_counts_all[other_shapes].sum(axis=1)

# === Prepare ColumnDataSource ===
final_shapes = ["uncommon shapes"] + list(top_shapes)
source_data  = {"year": shape_counts.index.tolist()}
colors       = Category20[20][:len(final_shapes)]
for s in final_shapes:
    source_data[s] = shape_counts[s].values
source = ColumnDataSource(source_data)

# === Emoji map ===
emoji_map = {
    "light": "💡", "triangle": "🔺", "circle": "⭕",
    "fireball": "🔥", "unknown": "❓", "uncommon shapes": "🛸"
}

# === Media events 1990–2014 ===
media = {
    1951: "The Day the Earth Stood Still",
    1977: "Close Encounters", 1979: "Alien", 1982: "E.T.",
    1986: "Aliens", 1993: "The X-Files (TV)", 1996: "Independence Day",
    1998: "X-Files: The Movie", 2002: "Signs",
    2009: "District 9", 2014: "Edge of Tomorrow"
}
media_years = [y for y in media if 1990 <= y <= 2014 and y in totals.index]
media_source = ColumnDataSource(dict(
    year =[y for y in media_years],
    count=[totals[y] for y in media_years],
    title=[media[y] for y in media_years]
))

# === Figure setup ===
p = figure(
    width=1000, height=500,
    x_range=(1990, 2014),
    y_range=(0, shape_counts.sum(axis=1).max() * 1.15),
    background_fill_color="#0f0f1f",
    title="U.S. UFO Shape Distribution Over Time (1990–2014)",
    tools="", toolbar_location=None
)

# === Stacked area ===
p.varea_stack(
    stackers=final_shapes,
    x="year",
    color=colors,
    legend_label=[f"{emoji_map[s]} {s}" for s in final_shapes],
    source=source
)
p.legend.items = list(reversed(p.legend.items))

# === Media event markers ===
media_renderer = p.circle(
    'year','count', source=media_source,
    size=12, fill_color="#ffd700", line_color="white",
    line_width=1.3, legend_label="Media Event", level="overlay"
)
p.add_tools(HoverTool(
    renderers=[media_renderer],
    tooltips=[("Movie", "@title"), ("Year","@year"), ("Sightings","@count")],
    mode="mouse", point_policy="follow_mouse"
))

# === Emojis ===
recent = shape_counts.tail(25)
max_h  = recent.sum(axis=1).max()
x_pts, y_pts, emojis, sizes = [], [], [], []
for i, s in enumerate(final_shapes):
    yr    = recent[s].idxmax()
    below = recent[final_shapes[:i]].loc[yr].sum()
    band  = recent[s].loc[yr]
    x_pts.append(yr)
    y_pts.append(below + band/2)
    emojis.append(emoji_map[s])
    sizes.append(f"{10 + band/max_h*16 - 4:.0f}pt")

emoji_source = ColumnDataSource(dict(x=x_pts, y=y_pts, emoji=emojis, size=sizes))
p.add_layout(LabelSet(
    x='x', y='y', text='emoji', source=emoji_source,
    text_font_size='size', text_align="center", text_baseline="middle"
))

# === Styling ===
p.xaxis.axis_label            = "Year"
p.yaxis.axis_label            = "Sightings"
p.xaxis.major_label_text_color = "#cccccc"
p.yaxis.major_label_text_color = "#cccccc"
p.xaxis.axis_line_color       = "#333333"
p.yaxis.axis_line_color       = "#333333"
p.xgrid.grid_line_color       = None
p.ygrid.grid_line_color       = "#222244"
p.title.text_color            = "#eeeeee"
p.title.text_font_size        = "16pt"
p.legend.label_text_color     = "#ffffff"
p.legend.background_fill_alpha= 0
p.legend.location             = "top_left"
p.legend.label_text_font_size = "9pt"

# Show it
show(p)
```

Skibidi 
```{python}
#| error: false
#| warning: false
#| message: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
data = pd.read_csv("data/complete.csv", on_bad_lines='skip')
data['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')
df=data[data["country"]=="us"].sort_index(level="datetime")
df = df.dropna(subset=['datetime'])
df = df.sort_values(by='datetime').reset_index(drop=True)
df=df.dropna()
hourtime=df["time"]=df["datetime"].dt.hour
plt.hist(hourtime, bins=24, range=(0, 24), density=True, alpha=0.5, color='blue')
plt.xlabel('Hour of the Day')
plt.show()
```

### Heatmap 
```{python}
#| error: false
#| warning: false
#| message: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from folium import plugins
from folium.plugins import HeatMap
import folium
from branca.element import Template, MacroElement

data = pd.read_csv("data/complete.csv", on_bad_lines='skip')
data['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')
df=data[data["country"]=="us"].sort_index(level="datetime")
df = df.dropna(subset=['datetime'])
df = df.sort_values(by='datetime').reset_index(drop=True)
df=df.dropna()

milbases=pd.read_csv("data/clean_military_bases.csv")
milcomp=milbases["component"]
letters=[i[0:2] for i in milbases["component"]]

milbases=milbases[(milcomp=="AF Guard" ) |(milcomp=="AF Reserve" )| (milcomp=="AF Active")]

milbasesl=milbases[["latitude","longitude"]]

# Create your map
map_hooray = folium.Map(location=[40.80887462217925, -101.64736435756755], zoom_start=4)

# Process your heatmap data
df['latitude'] = df['latitude'].astype(float)
df['longitude'] = df['longitude'].astype(float)
heat_df = df[['latitude', 'longitude']].dropna()
heat_data = [[row['latitude'], row['longitude']] for index, row in heat_df.iterrows()]

# Add heatmap with adjusted parameters for less density
HeatMap(
    heat_data,
    radius=5,             # smaller spread
    blur=1,               # smoother blending
    max_opacity=0.5,       # reduce color saturation
    min_opacity=0.3,       # allow fade for low-density areas
    use_local_extrema=False  # keep global scale
).add_to(map_hooray)

# Add circle markers for different components
for index, row in milbasesl[milcomp == "AF Reserve"].iterrows():
    folium.CircleMarker(
        location=[row['latitude'], row['longitude']],
        radius=3,
        color='magenta',
        fill=True,
        fill_color='magenta',
        fill_opacity=0.6
    ).add_to(map_hooray)

for index, row in milbasesl[milcomp == "AF Active"].iterrows():
    folium.CircleMarker(
        location=[row['latitude'], row['longitude']],
        radius=3,
        color='red',
        fill=True,
        fill_color='red',
        fill_opacity=0.6
    ).add_to(map_hooray)

for index, row in milbasesl[milcomp == "AF Guard"].iterrows():
    folium.CircleMarker(
        location=[row['latitude'], row['longitude']],
        radius=3,
        color='green',
        fill=True,
        fill_color='green',
        fill_opacity=0.6
    ).add_to(map_hooray)

# Custom legend (unchanged)
template = """
{% macro html(this, kwargs) %}
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Heatmap Legend</title>
  <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
  <script>
  $( function() {
    $( "#maplegend" ).draggable({
        start: function (event, ui) {
            $(this).css({ right: "auto", top: "auto", bottom: "auto" });
        }
    });
  });
  </script>
</head>
<body>
<div id='maplegend' class='maplegend' 
    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);
     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'>
     
<div class='legend-title'>Legend</div>
<div class='legend-scale'>
  <ul class='legend-labels'>
    <li><span style='background:red;opacity:0.7;'></span>AF Active</li>
    <li><span style='background:magenta;opacity:0.7;'></span>AF Reserve</li>
    <li><span style='background:green;opacity:0.7;'></span>AF Guard</li>
    <li><span style='background:#000000;opacity:0.7;'></span>Heatmap Intensity</li>
  </ul>
</div>
</div>
</body>
</html>

<style type='text/css'>
  .maplegend .legend-title {
    text-align: left;
    margin-bottom: 5px;
    font-weight: bold;
    font-size: 90%;
    }
  .maplegend .legend-scale ul {
    margin: 0;
    padding: 0;
    float: left;
    list-style: none;
    }
  .maplegend .legend-scale ul li {
    font-size: 80%;
    list-style: none;
    margin-left: 0;
    line-height: 18px;
    margin-bottom: 2px;
    }
  .maplegend ul.legend-labels li span {
    display: block;
    float: left;
    height: 16px;
    width: 30px;
    margin-right: 5px;
    margin-left: 0;
    border: 1px solid #999;
    }
  .maplegend .legend-source {
    font-size: 80%;
    color: #777;
    clear: both;
    }
  .maplegend a {
    color: #777;
    }
</style>
{% endmacro %}
"""

# Add the legend to the map
macro = MacroElement()
macro._template = Template(template)
map_hooray.get_root().add_child(macro)

# Display the map
map_hooray
```

One would assume that we can see a correlation between 
 
```{python}
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

excluded = {'pr', 'dc'}

data = pd.read_csv("data/historical_state_population_by_year.csv", on_bad_lines='skip')
data = data[(data['year'] >= 1950) & (data['year'] <= 2014)]
data["state"]=data["state"].str.lower()

# Filter out non-states
data["state"]=data["state"][data["state"].isin(excluded)==False]
data = data.dropna(subset=['state'])



df = pd.read_csv("data/complete.csv", on_bad_lines='skip')
df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
df=df[df["country"]=="us"].sort_index(level="datetime")
df["state"]=df["state"][df["state"].isin(excluded)==False]
df = df.dropna(subset=['datetime'])
df = df.sort_values(by='datetime').reset_index(drop=True)
df=df.dropna()
df['year'] = df['datetime'].dt.year
df = df[(df['year'] >= 1950) & (df['year'] <= 2014)]

# Group by state and year
grouped = df.groupby(['state', 'year']).size().reset_index(name='num_sightings')

# Create complete state-year grid
all_states = df['state'].unique()
all_years = range(1950, 2015)
full_index = pd.MultiIndex.from_product([all_states, all_years], names=['state', 'year'])

# Reindex to include all combinations, fill missing with 0
sightings_summary = grouped.set_index(['state', 'year']).reindex(full_index, fill_value=0).reset_index()
sightings_summary = sightings_summary.sort_values(by=['state', 'year']).reset_index(drop=True)


merged = pd.merge(data, sightings_summary, on=['state', 'year'])

# Drop any rows with missing data (just in case)
merged = merged.dropna(subset=['population', 'num_sightings'])

# Calculate correlation
correlation = merged['population'].corr(merged['num_sightings'])
correlation

plt.figure(figsize=(10, 6))

# Plot each state as a different color
for state in merged['state'].unique():
    state_data = merged[merged['state'] == state]
    plt.scatter(state_data['population'], state_data['num_sightings'], label=state, alpha=0.6, s=20)

plt.title('UFO Sightings vs Population (1950–2014)')
plt.xlabel('Population')
plt.ylabel('Number of Sightings')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left', fontsize='small', ncol=2)
plt.tight_layout()
plt.grid(True)
plt.show()
```

```{python}
from bokeh.io import output_notebook, show
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, Slider, CustomJS
from bokeh.layouts import column
from sklearn.linear_model import LinearRegression
import pandas as pd
import numpy as np
import json

output_notebook()

# Load and clean population data
excluded = {'pr', 'dc'}
data = pd.read_csv("data/historical_state_population_by_year.csv", on_bad_lines='skip')
data = data[(data['year'] >= 1950) & (data['year'] <= 2014)]
data["state"] = data["state"].str.lower()
data = data[~data["state"].isin(excluded)]
data = data.dropna(subset=['state'])

# Load and clean sightings data
df = pd.read_csv("data/complete.csv", on_bad_lines='skip')
df['datetime'] = pd.to_datetime(df['datetime'], errors='coerce')
df = df[df["country"] == "us"]
df = df[~df["state"].isin(excluded)]
df = df.dropna(subset=['datetime'])
df = df.sort_values(by='datetime').reset_index(drop=True)
df['year'] = df['datetime'].dt.year
df = df[(df['year'] >= 1950) & (df['year'] <= 2014)]

# Group by state and year
grouped = df.groupby(['state', 'year']).size().reset_index(name='num_sightings')

# Create complete grid
all_states = df['state'].unique()
all_years = range(1950, 2015)
full_index = pd.MultiIndex.from_product([all_states, all_years], names=['state', 'year'])
sightings_summary = grouped.set_index(['state', 'year']).reindex(full_index, fill_value=0).reset_index()

# Merge datasets
merged = pd.merge(data, sightings_summary, on=['year', 'state'])

# Compute correlation per year
state_correlations = merged.groupby('year').apply(
    lambda g: g['population'].corr(g['num_sightings'])
).reset_index(name='correlation')

# Prepare Bokeh data structures
year_data = {}
plot_meta = {}

for year in sorted(merged['year'].unique()):
    df_year = merged[merged['year'] == year]
    x = df_year['population'].values
    y = df_year['num_sightings'].values

    if len(x) > 1:
        model = LinearRegression()
        model.fit(x.reshape(-1, 1), y)
        y_pred = model.predict(x.reshape(-1, 1))
        slope = model.coef_[0]
        intercept = model.intercept_
        ss_res = np.sum((y - y_pred) ** 2)
        ss_tot = np.sum((y - np.mean(y)) ** 2)
        r2 = 1 - ss_res / ss_tot
    else:
        y_pred = np.zeros_like(x)
        slope = intercept = r2 = 0

    corr = state_correlations[state_correlations['year'] == year]['correlation'].values[0]

    year_data[str(year)] = {
        'x': x.tolist(),
        'y': y.tolist(),
        'y_pred': y_pred.tolist()
    }

    plot_meta[str(year)] = {
        'title': f"UFO Sightings vs Population - {year} | y = {slope:.2f}x + {intercept:.2f} | R² = {r2:.2f} | Corr = {corr:.2f}"
    }

# Bokeh plotting
initial_year = str(sorted(merged['year'].unique())[0])
source = ColumnDataSource(data=year_data[initial_year])

p = figure(height=400, width=600,
           title=plot_meta[initial_year]['title'],
           x_axis_label='Population', y_axis_label='Number of Sightings')

p.circle('x', 'y', size=8, source=source, legend_label="Data")
p.line('x', 'y_pred', source=source, line_width=2, color='red', legend_label="Regression Line")
p.legend.location = "top_left"

# Slider and JS Callback
slider = Slider(start=merged['year'].min(), end=merged['year'].max(), value=int(initial_year), step=1, title="Year")

callback = CustomJS(args=dict(source=source, slider=slider, plot=p),
    code=f"""
        const year_data = {json.dumps(year_data)};
        const meta = {json.dumps(plot_meta)};
        const year = slider.value.toString();

        source.data = year_data[year];
        plot.title.text = meta[year].title;
        source.change.emit();
    """
)

slider.js_on_change('value', callback)

show(column(slider, p))

```

