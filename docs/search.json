[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "What is the cause of the increase in UFO sightings?",
    "section": "",
    "text": "Since the beginning of the 20th century we have reported UFO sightings. What this project is trying to do is to look at the trend of the UFO sightings and try to explain them in a way which is not attributed to an increase in actual UFOs. Since a major part of the sightings are in the US (which already debunks the idea of UFOs actually being aliens) we are only focusing on that data.\n\nTime series plot\nThe first thing relevant to look at is the development of number of UFO sightings over the last decade. The first sighting in the data set is from 1910. But since they are so few sightings we choose to look at sightings from 1950 to 2014. Other than the number of sightings we also look at different popular shows and movies of different years to see if we might see their impact\nIf we look at the\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = pd.read_csv(\"data/complete.csv\", on_bad_lines='skip')\ndata['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')\ndf=data[data[\"country\"]==\"us\"].sort_index(level=\"datetime\")\ndf = df.dropna(subset=['datetime'])\ndf = df.sort_values(by='datetime').reset_index(drop=True)\ndf=df.dropna()\nhourtime=df[\"time\"]=df[\"datetime\"].dt.hour\nplt.hist(hourtime, bins=24, range=(0, 24), density=True, alpha=0.5, color='blue')\nplt.xlabel('Hour of the Day')\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\nHeatmap\n\n\nCode\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = pd.read_csv(\"data/complete.csv\", on_bad_lines='skip')\ndata['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')\ndf=data[data[\"country\"]==\"us\"].sort_index(level=\"datetime\")\ndf = df.dropna(subset=['datetime'])\ndf = df.sort_values(by='datetime').reset_index(drop=True)\ndf=df.dropna()\n\nfrom folium import plugins\nfrom folium.plugins import HeatMap\nimport folium\nfrom branca.element import Template, MacroElement\n\nmilbases=pd.read_csv(\"data/clean_military_bases.csv\")\nmilcomp=milbases[\"component\"]\nletters=[i[0:2] for i in milbases[\"component\"]]\n\nmilbases=milbases[(milcomp==\"AF Guard\" ) |(milcomp==\"AF Reserve\" )| (milcomp==\"AF Active\")]\n\nmilbasesl=milbases[[\"latitude\",\"longitude\"]]\n\n# Create your map\nmap_hooray = folium.Map(location=[40.80887462217925, -101.64736435756755], zoom_start=4)\n\n# Process your heatmap data\ndf['latitude'] = df['latitude'].astype(float)\ndf['longitude'] = df['longitude'].astype(float)\nheat_df = df[['latitude', 'longitude']].dropna()\nheat_data = [[row['latitude'], row['longitude']] for index, row in heat_df.iterrows()]\n\n# Add heatmap with adjusted parameters for less density\nHeatMap(\n    heat_data,\n    radius=5,             # smaller spread\n    blur=1,               # smoother blending\n    max_opacity=0.5,       # reduce color saturation\n    min_opacity=0.3,       # allow fade for low-density areas\n    use_local_extrema=False  # keep global scale\n).add_to(map_hooray)\n\n# Add circle markers for different components\nfor index, row in milbasesl[milcomp == \"AF Reserve\"].iterrows():\n    folium.CircleMarker(\n        location=[row['latitude'], row['longitude']],\n        radius=3,\n        color='magenta',\n        fill=True,\n        fill_color='magenta',\n        fill_opacity=0.6\n    ).add_to(map_hooray)\n\nfor index, row in milbasesl[milcomp == \"AF Active\"].iterrows():\n    folium.CircleMarker(\n        location=[row['latitude'], row['longitude']],\n        radius=3,\n        color='red',\n        fill=True,\n        fill_color='red',\n        fill_opacity=0.6\n    ).add_to(map_hooray)\n\nfor index, row in milbasesl[milcomp == \"AF Guard\"].iterrows():\n    folium.CircleMarker(\n        location=[row['latitude'], row['longitude']],\n        radius=3,\n        color='green',\n        fill=True,\n        fill_color='green',\n        fill_opacity=0.6\n    ).add_to(map_hooray)\n\n# Custom legend (unchanged)\ntemplate = \"\"\"\n{% macro html(this, kwargs) %}\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;title&gt;Heatmap Legend&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css\"&gt;\n  &lt;script src=\"https://code.jquery.com/jquery-1.12.4.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://code.jquery.com/ui/1.12.1/jquery-ui.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n  $( function() {\n    $( \"#maplegend\" ).draggable({\n        start: function (event, ui) {\n            $(this).css({ right: \"auto\", top: \"auto\", bottom: \"auto\" });\n        }\n    });\n  });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id='maplegend' class='maplegend' \n    style='position: absolute; z-index:9999; border:2px solid grey; background-color:rgba(255, 255, 255, 0.8);\n     border-radius:6px; padding: 10px; font-size:14px; right: 20px; bottom: 20px;'&gt;\n     \n&lt;div class='legend-title'&gt;Legend&lt;/div&gt;\n&lt;div class='legend-scale'&gt;\n  &lt;ul class='legend-labels'&gt;\n    &lt;li&gt;&lt;span style='background:red;opacity:0.7;'&gt;&lt;/span&gt;AF Active&lt;/li&gt;\n    &lt;li&gt;&lt;span style='background:magenta;opacity:0.7;'&gt;&lt;/span&gt;AF Reserve&lt;/li&gt;\n    &lt;li&gt;&lt;span style='background:green;opacity:0.7;'&gt;&lt;/span&gt;AF Guard&lt;/li&gt;\n    &lt;li&gt;&lt;span style='background:#000000;opacity:0.7;'&gt;&lt;/span&gt;Heatmap Intensity&lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n&lt;style type='text/css'&gt;\n  .maplegend .legend-title {\n    text-align: left;\n    margin-bottom: 5px;\n    font-weight: bold;\n    font-size: 90%;\n    }\n  .maplegend .legend-scale ul {\n    margin: 0;\n    padding: 0;\n    float: left;\n    list-style: none;\n    }\n  .maplegend .legend-scale ul li {\n    font-size: 80%;\n    list-style: none;\n    margin-left: 0;\n    line-height: 18px;\n    margin-bottom: 2px;\n    }\n  .maplegend ul.legend-labels li span {\n    display: block;\n    float: left;\n    height: 16px;\n    width: 30px;\n    margin-right: 5px;\n    margin-left: 0;\n    border: 1px solid #999;\n    }\n  .maplegend .legend-source {\n    font-size: 80%;\n    color: #777;\n    clear: both;\n    }\n  .maplegend a {\n    color: #777;\n    }\n&lt;/style&gt;\n{% endmacro %}\n\"\"\"\n\n# Add the legend to the map\nmacro = MacroElement()\nmacro._template = Template(template)\nmap_hooray.get_root().add_child(macro)\n\n# Display the map\nmap_hooray\n\n\nMake this Notebook Trusted to load map: File -&gt; Trust Notebook"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is created to share insights and updates about our social data project. Stay tuned for more information and findings!"
  },
  {
    "objectID": "Plots/dummyfil.html",
    "href": "Plots/dummyfil.html",
    "title": "Social data analysis and visualization project",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\ndata = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\ndata['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')\ndf=data[data[\"country\"]==\"us\"].sort_index(level=\"datetime\")\ndf = df.dropna(subset=['datetime'])\ndf = df.sort_values(by='datetime').reset_index(drop=True)\ndf=df.dropna()\nhourtime=df[\"time\"]=df[\"datetime\"].dt.hour\nplt.hist(hourtime, bins=24, range=(0, 24), density=True, alpha=0.5, color='blue')\nplt.xlabel('Hour of the Day')\n\nC:\\Users\\anton\\AppData\\Local\\Temp\\ipykernel_56424\\2783440738.py:4: DtypeWarning: Columns (5,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\n\n\nText(0.5, 0, 'Hour of the Day')"
  },
  {
    "objectID": "Plots/time series barplot.html",
    "href": "Plots/time series barplot.html",
    "title": "Social data analysis and visualization project",
    "section": "",
    "text": "import pandas as pd\ndata = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\ndata['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')\ndf=data[data[\"country\"]==\"us\"].sort_index(level=\"datetime\")\ndf = df.dropna(subset=['datetime'])\ndf = df.sort_values(by='datetime').reset_index(drop=True)\ndf=df.dropna()\n\nC:\\Users\\anton\\AppData\\Local\\Temp\\ipykernel_110100\\3343208995.py:2: DtypeWarning: Columns (5,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\n\n\n\n#import pandas_profiling\n\n\nimport pandas as pd\nfrom bokeh.plotting import figure, show\nfrom bokeh.models import ColumnDataSource, HoverTool, Span\nfrom bokeh.io import output_notebook\n\n# output_notebook()  # Uncomment if using Jupyter Notebook\n\n# === Load & Clean Data ===\ndata = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\ndata['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')\ndf = data[data[\"country\"] == \"us\"].dropna(subset=['datetime'])\ndf['year'] = df['datetime'].dt.year\nyear_counts = df['year'].value_counts().sort_index()\n\nsightings_source = ColumnDataSource(data=dict(\n    year=year_counts.index.tolist(),\n    count=year_counts.values.tolist()\n))\n\n# === Annotated Media Events ===\nalien_media = {\n    1951: (\"The Day the Earth Stood Still\", \"movie\"),\n    1977: (\"Close Encounters\", \"movie\"),\n    1979: (\"Alien\", \"movie\"),\n    1982: (\"E.T.\", \"movie\"),\n    1986: (\"Aliens\", \"movie\"),\n    1993: (\"The X-Files (TV)\", \"tv\"),\n    1996: (\"Independence Day\", \"movie\"),\n    1998: (\"X-Files: The Movie\", \"tv\"),\n    2002: (\"Signs\", \"movie\"),\n    2009: (\"District 9\", \"movie\"),\n    2014: (\"Edge of Tomorrow\", \"movie\")\n}\n\nmedia_data = {\n    'year': [],\n    'count': [],\n    'title': [],\n    'type': []\n}\nfor year, (title, typ) in alien_media.items():\n    if year in year_counts.index:\n        media_data['year'].append(year)\n        media_data['count'].append(year_counts[year])\n        media_data['title'].append(title)\n        media_data['type'].append(typ)\n\nmedia_source = ColumnDataSource(media_data)\n\n# === Create Bokeh Plot ===\np = figure(\n    width=1000, height=500,\n    background_fill_color=\"#0f0f1f\", border_fill_color=\"#0f0f1f\",\n    title=\"U.S. UFO Sightings with Major Alien Media Releases\",\n    x_axis_label=None, y_axis_label=None,\n    x_range=(min(year_counts.index)-1, max(year_counts.index)+1),\n    tools=\"\", toolbar_location=None\n)\n\np.vbar(x='year', top='count', width=0.8, source=sightings_source,\n       color=\"#00ff99\", line_color=None, legend_label=\"Sightings\")\n\n# Neon markers for media events\nmedia_renderer = p.circle(x='year', y='count', size=10,\n                          color=\"#ff3366\", alpha=0.9, source=media_source,\n                          legend_label=\"Media Event\")\n\n# Tooltip for media events\np.add_tools(HoverTool(\n    renderers=[media_renderer],\n    tooltips=[(\"Media\", \"@title\"), (\"Year\", \"@year\"), (\"Sightings\", \"@count\")],\n    mode='mouse'\n))\n\n# Styling polish\np.xaxis.major_label_text_color = \"#cccccc\"\np.yaxis.major_label_text_color = \"#cccccc\"\np.xaxis.axis_line_color = \"#333333\"\np.yaxis.axis_line_color = \"#333333\"\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = \"#222244\"\np.title.text_color = \"#eeeeee\"\np.title.text_font_size = \"16pt\"\np.title.align = \"center\"\np.legend.label_text_color = \"#cccccc\"\np.legend.background_fill_alpha = 0.0\np.legend.location = \"top_left\"\n\n# Show it\nshow(p)\n\nC:\\Users\\anton\\AppData\\Local\\Temp\\ipykernel_110100\\730181234.py:9: DtypeWarning: Columns (5,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\nBokehDeprecationWarning: 'circle() method with size value' was deprecated in Bokeh 3.4.0 and will be removed, use 'scatter(size=...) instead' instead.\n\n\n\nimport pandas as pd\nfrom bokeh.plotting import figure, show\nfrom bokeh.models import ColumnDataSource, HoverTool, LabelSet\nfrom bokeh.palettes import Category20\n\n# === Load and preprocess data ===\ndata = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\ndata[\"datetime\"] = pd.to_datetime(data[\"datetime\"], errors=\"coerce\")\ndf = data[data[\"country\"] == \"us\"].dropna(subset=[\"datetime\", \"shape\"])\ndf[\"year\"] = df[\"datetime\"].dt.year\n\n# === Compute total sightings per year (all shapes) ===\ntotals = df.groupby(\"year\").size()\ntotals = totals[totals.index &gt;= 1960]\n\n# === Full shape distribution (pivot) ===\nshape_counts_all = df.groupby([\"year\", \"shape\"]).size().unstack(fill_value=0)\n\n# === Select top 5 shapes, group rest as 'uncommon shapes' ===\nshape_totals = shape_counts_all.sum().sort_values(ascending=False)\ntop_shapes = shape_totals.head(5).index\nother_shapes = shape_totals.index.difference(top_shapes)\n\n# Create new DataFrame for top 5 + 'uncommon shapes'\nshape_counts = shape_counts_all[top_shapes].copy()\nshape_counts[\"uncommon shapes\"] = shape_counts_all[other_shapes].sum(axis=1)\nshape_counts = shape_counts[shape_counts.index &gt;= 1960]\n\n# === Stack plot source ===\nfinal_shapes = [\"uncommon shapes\"] + list(top_shapes)  # Move to bottom\nsource_data = {\"year\": shape_counts.index.tolist()}\ncolors = Category20[20][:len(final_shapes)]\nfor s in final_shapes:\n    source_data[s] = shape_counts[s].values\nsource = ColumnDataSource(source_data)\n\n# === Emoji map ===\nemoji_map = {\n    \"light\": \"💡\", \"triangle\": \"🔺\", \"circle\": \"⭕\",\n    \"fireball\": \"🔥\", \"unknown\": \"❓\", \"uncommon shapes\": \"🛸\"\n}\n\n# === Media events ===\nmedia = {\n    1951: \"The Day the Earth Stood Still\",\n    1977: \"Close Encounters\", 1979: \"Alien\", 1982: \"E.T.\",\n    1986: \"Aliens\", 1993: \"The X-Files (TV)\", 1996: \"Independence Day\",\n    1998: \"X-Files: The Movie\", 2002: \"Signs\",\n    2009: \"District 9\", 2014: \"Edge of Tomorrow\"\n}\nmedia_years = [y for y in media if y in totals.index]\nmedia_source = ColumnDataSource(data=dict(\n    year=media_years,\n    count=[totals[y] for y in media_years],\n    title=[media[y] for y in media_years]\n))\n\n# === Bokeh figure ===\nxmin, xmax = shape_counts.index.min(), shape_counts.index.max()\np = figure(\n    width=1000, height=500,\n    x_range=(1960, xmax + 3),\n    y_range=(0, shape_counts.sum(axis=1).max() * 1.15),\n    background_fill_color=\"#0f0f1f\",\n    title=\"U.S. UFO Shape Distribution Over Time (All Shapes)\",\n    tools=\"\", toolbar_location=None\n)\n\n# === Area stack ===\np.varea_stack(\n    stackers=final_shapes,\n    x=\"year\",\n    color=colors,\n    legend_label=[f\"{emoji_map.get(s, '🛸')} {s}\" for s in final_shapes],\n    source=source\n)\n\n# Then reverse the legend manually (Bokeh workaround)\np.legend.items = list(reversed(p.legend.items))\n\n\n\n\n# === Media dots ===\nmedia_renderer = p.circle(\n    'year', 'count',\n    source=media_source,\n    size=12,\n    fill_color=\"#ffd700\",\n    line_color=\"white\",\n    line_width=1.3,\n    legend_label=\"Media Event\",\n    level=\"overlay\"\n)\np.add_tools(HoverTool(\n    renderers=[media_renderer],\n    tooltips=[(\"Movie\", \"@title\"), (\"Year\", \"@year\"), (\"Sightings\", \"@count\")],\n    mode=\"mouse\", point_policy=\"follow_mouse\"\n))\n\n# === Emojis ===\nrecent = shape_counts.tail(25)\nmax_h = recent.sum(axis=1).max()\nx_pts, y_pts, emojis, sizes = [], [], [], []\nfor i, s in enumerate(final_shapes):\n    yr = recent[s].idxmax()\n    below = recent[final_shapes[:i]].loc[yr].sum()\n    band = recent[s].loc[yr]\n    x_pts.append(yr)\n    y_pts.append(below + band / 2)\n    emojis.append(emoji_map.get(s, \"🛸\"))\n    sizes.append(f\"{10 + band / max_h * 16 - 4:.0f}pt\")\n\nemoji_source = ColumnDataSource(dict(x=x_pts, y=y_pts, emoji=emojis, size=sizes))\np.add_layout(LabelSet(\n    x='x', y='y', text='emoji', source=emoji_source,\n    text_font_size='size', text_align=\"center\", text_baseline=\"middle\"\n))\n\n# === Style ===\np.xaxis.axis_label = \"Year\"\np.yaxis.axis_label = \"Sightings\"\np.xaxis.major_label_text_color = \"#cccccc\"\np.yaxis.major_label_text_color = \"#cccccc\"\np.xaxis.axis_line_color = \"#333333\"\np.yaxis.axis_line_color = \"#333333\"\np.xgrid.grid_line_color = None\np.ygrid.grid_line_color = \"#222244\"\np.title.text_color = \"#eeeeee\"\np.title.text_font_size = \"16pt\"\np.legend.label_text_color = \"#ffffff\"\np.legend.background_fill_alpha = 0\np.legend.location = \"top_left\"\np.legend.label_text_font_size = \"9pt\"\n\nshow(p)\n\nC:\\Users\\anton\\AppData\\Local\\Temp\\ipykernel_110100\\3202122139.py:7: DtypeWarning: Columns (5,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\nBokehDeprecationWarning: 'circle() method with size value' was deprecated in Bokeh 3.4.0 and will be removed, use 'scatter(size=...) instead' instead."
  },
  {
    "objectID": "Plots/military-bases.html",
    "href": "Plots/military-bases.html",
    "title": "Heatmap of military bases",
    "section": "",
    "text": "import pandas as pd\n# Read UFO sightings data\ndata = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\ndata['datetime'] = pd.to_datetime(data['datetime'], errors='coerce')\ndf=data[data[\"country\"]==\"us\"].sort_index(level=\"datetime\")\ndf = df.dropna(subset=['datetime'])\ndf = df.sort_values(by='datetime').reset_index(drop=True)\ndf=df.dropna()\n\n# Read military bases data\nmilitary_bases = pd.read_csv(\"../data/military-bases.csv\", on_bad_lines='skip')\nmilitary_bases = military_bases.dropna()\n\n# Display military bases data\nprint(\"\\nMilitary Bases Data:\")\nmilitary_bases\n\nC:\\Users\\anton\\AppData\\Local\\Temp\\ipykernel_111696\\1580756030.py:3: DtypeWarning: Columns (5,9) have mixed types. Specify dtype option on import or set low_memory=False.\n  data = pd.read_csv(\"../data/complete.csv\", on_bad_lines='skip')\n\n\n\nMilitary Bases Data:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGeo Point;Geo Shape;OBJECTID_1;OBJECTID;COMPONENT;Site Name;Joint Base;State Terr;COUNTRY;Oper Stat;PERIMETER;AREA;Shape_Leng;Shape_Area\n\n\n\n\n31.230999\n-85.6506347178;\"{\"\"coordinates\"\": [[[-85.65462565497243\n31.234178331412515]\n[-85.65280405303592\n31.2350202819558]\n[-85.65101108759404\n31.233844887000856]\n[-85.64624105229998\n31.231687174187147]\n[-85.6461603431633\n31.227908115185613]\n[-85.64979400602967\n31.22793346599952]\n[-85.65055293422273\n31.22819845388161]\n[-85.65114885861591\n31.228358922650713]\n[-85.65448605767558\n31.229254906742018]\n[-85.65462565497243\n31.234178331412515]]]\n\"\"type\"\": \"\"Polygon\"\"}\";26;65;Army Active;All...\n\n\n29.884619\n-98.2193812601;\"{\"\"coordinates\"\": [[[-98.21405296403519\n29.881741788407666]\n[-98.22093997631431\n29.87525638900559]\n[-98.22688073381588\n29.880714298886854]\n[-98.22376613997854\n29.8839619002862]\n[-98.22267722644564\n29.891689856087375]\n[-98.2140001260285\n29.89308936826227]\n[-98.21404370420125\n29.889994012243857]\n[-98.21404924231497\n29.889815498432725]\n[-98.21409100050096\n29.884640003341854]\n[-98.21405296403519\n29.881741788407666]]]\n\"\"type\"\": \"\"Polygon\"\"}\";423;2954;AF Active;Ca...\n\n\n13.310684\n144.736799463;\"{\"\"coordinates\"\": [[[144.74050133252663\n13.310010427767008]\n[144.7405013603744\n13.30973491498884]\n[144.7405016460386\n13.307058682780797]\n[144.73679989806027\n13.307058286770022]\n[144.733098159065\n13.307057834810683]\n[144.73309767307646\n13.31068323745712]\n[144.7330971772064\n13.314308639156133]\n[144.73679902579607\n13.314309070121853]\n[144.74050088336895\n13.314309446014882]\n[144.74050133252663\n13.310010427767008]]]\n\"\"type\"\": \"\"Polygon\"\"}\";664;5610;Navy Active;...\n\n\n38.760289\n-104.301342147;\"{\"\"coordinates\"\": [[[-104.3037858883342\n38.781215702234775]\n[-104.30348866455277\n38.76687622422326]\n[-104.29908696906791\n38.76691106643378]\n[-104.29858255156117\n38.75036433784128]\n[-104.30319186477617\n38.75033028410978]\n[-104.30369826396647\n38.76687460696151]\n[-104.30399642558903\n38.78121306359585]\n[-104.30428333940594\n38.795705506983]\n[-104.30407363488939\n38.79570815838814]\n[-104.3037858883342\n38.781215702234775]]]\n\"\"type\"\": \"\"Polygon\"\"}\";295;2498;AF Active;US...\n\n\n39.823370\n-89.6708742707;\"{\"\"coordinates\"\": [[[-89.66858233781238\n39.83064753161304]\n[-89.66842497722912\n39.81974738310147]\n[-89.66839715370982\n39.81781897541764]\n[-89.6683724500395\n39.81610674313765]\n[-89.67313007690454\n39.81606001154887]\n[-89.67313228586183\n39.81620299588274]\n[-89.6733774864085\n39.827663902287256]\n[-89.67339565124186\n39.83025113394826]\n[-89.67221159174736\n39.83068336257657]\n[-89.66858233781238\n39.83064753161304]]]\n\"\"type\"\": \"\"Polygon\"\"}\";494;3731;Army Guard;N...\n\n\n\n\n\n\n\n\n# Print the column names to see what we're working with\nprint(\"Columns in military_bases DataFrame:\")\nprint(military_bases.columns)\n\n# Also let's look at the first few rows to understand the data structure\nprint(\"\\nFirst few rows of military_bases:\")\nprint(military_bases.head())\n\nColumns in military_bases DataFrame:\nIndex(['Geo Point;Geo Shape;OBJECTID_1;OBJECTID;COMPONENT;Site Name;Joint Base;State Terr;COUNTRY;Oper Stat;PERIMETER;AREA;Shape_Leng;Shape_Area'], dtype='object')\n\nFirst few rows of military_bases:\n                                                                                                                                                                                                                                                                                                                                                                                                                                                                 Geo Point;Geo Shape;OBJECTID_1;OBJECTID;COMPONENT;Site Name;Joint Base;State Terr;COUNTRY;Oper Stat;PERIMETER;AREA;Shape_Leng;Shape_Area\n31.230999 -85.6506347178;\"{\"\"coordinates\"\": [[[-85.654625... 31.234178331412515] [-85.65280405303592  31.2350202819558]  [-85.65101108759404  31.233844887000856] [-85.64624105229998  31.231687174187147] [-85.6461603431633   31.227908115185613] [-85.64979400602967  31.22793346599952] [-85.65055293422273  31.22819845388161]  [-85.65114885861591  31.228358922650713] [-85.65448605767558  31.229254906742018] [-85.65462565497243 31.234178331412515]]]   \"\"type\"\": \"\"Polygon\"\"}\";26;65;Army Active;All...                                                                                      \n29.884619 -98.2193812601;\"{\"\"coordinates\"\": [[[-98.214052... 29.881741788407666] [-98.22093997631431  29.87525638900559] [-98.22688073381588  29.880714298886854] [-98.22376613997854  29.8839619002862]   [-98.22267722644564  29.891689856087375] [-98.2140001260285   29.89308936826227] [-98.21404370420125  29.889994012243857] [-98.21404924231497  29.889815498432725] [-98.21409100050096  29.884640003341854] [-98.21405296403519 29.881741788407666]]]   \"\"type\"\": \"\"Polygon\"\"}\";423;2954;AF Active;Ca...                                                                                      \n13.310684 144.736799463;\"{\"\"coordinates\"\": [[[144.7405013... 13.310010427767008] [144.7405013603744   13.30973491498884] [144.7405016460386   13.307058682780797] [144.73679989806027  13.307058286770022] [144.733098159065    13.307057834810683] [144.73309767307646  13.31068323745712] [144.7330971772064   13.314308639156133] [144.73679902579607  13.314309070121853] [144.74050088336895  13.314309446014882] [144.74050133252663 13.310010427767008]]]   \"\"type\"\": \"\"Polygon\"\"}\";664;5610;Navy Active;...                                                                                      \n38.760289 -104.301342147;\"{\"\"coordinates\"\": [[[-104.30378... 38.781215702234775] [-104.30348866455277 38.76687622422326] [-104.29908696906791 38.76691106643378]  [-104.29858255156117 38.75036433784128]  [-104.30319186477617 38.75033028410978]  [-104.30369826396647 38.76687460696151] [-104.30399642558903 38.78121306359585]  [-104.30428333940594 38.795705506983]    [-104.30407363488939 38.79570815838814]  [-104.3037858883342 38.781215702234775]]]   \"\"type\"\": \"\"Polygon\"\"}\";295;2498;AF Active;US...                                                                                      \n39.823370 -89.6708742707;\"{\"\"coordinates\"\": [[[-89.668582... 39.83064753161304]  [-89.66842497722912  39.81974738310147] [-89.66839715370982  39.81781897541764]  [-89.6683724500395   39.81610674313765]  [-89.67313007690454  39.81606001154887]  [-89.67313228586183  39.81620299588274] [-89.6733774864085   39.827663902287256] [-89.67339565124186  39.83025113394826]  [-89.67221159174736  39.83068336257657]  [-89.66858233781238 39.83064753161304]]]    \"\"type\"\": \"\"Polygon\"\"}\";494;3731;Army Guard;N...                                                                                      \n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Let's first look at what we're working with\nprint(\"First row of coordinates:\")\nprint(military_bases['Geo Point;Geo Shape;OBJECTID_1;OBJECTID;COMPONENT;Site Name;Joint Base;State Terr;COUNTRY;Oper Stat;PERIMETER;AREA;Shape_Leng;Shape_Area'].iloc[0])\n\n# Let's try to extract just the first part before the semicolon\ncoordinates = military_bases['Geo Point;Geo Shape;OBJECTID_1;OBJECTID;COMPONENT;Site Name;Joint Base;State Terr;COUNTRY;Oper Stat;PERIMETER;AREA;Shape_Leng;Shape_Area'].str.split(';').str[0]\n\n# Print the first few coordinates to see the format\nprint(\"\\nFirst few coordinates:\")\nprint(coordinates.head())\n\nFirst row of coordinates:\n \"\"type\"\": \"\"Polygon\"\"}\";26;65;Army Active;Allen Stagefield AL;N/A;Alabama;United States;Active;1.64138338;0.17657484;3170.6333159366786;627423.9946918904\n\nFirst few coordinates:\n31.230999  -85.6506347178;\"{\"\"coordinates\"\": [[[-85.65462565497243  31.234178331412515]  [-85.65280405303592   31.2350202819558]   [-85.65101108759404   31.233844887000856]  [-85.64624105229998   31.231687174187147]  [-85.6461603431633    31.227908115185613]  [-85.64979400602967   31.22793346599952]  [-85.65055293422273   31.22819845388161]   [-85.65114885861591   31.228358922650713]  [-85.65448605767558   31.229254906742018]  [-85.65462565497243  31.234178331412515]]]     \"\"type\"\": \"\"Polygon\"\"}\"\n29.884619  -98.2193812601;\"{\"\"coordinates\"\": [[[-98.21405296403519  29.881741788407666]  [-98.22093997631431   29.87525638900559]  [-98.22688073381588   29.880714298886854]  [-98.22376613997854   29.8839619002862]    [-98.22267722644564   29.891689856087375]  [-98.2140001260285    29.89308936826227]  [-98.21404370420125   29.889994012243857]  [-98.21404924231497   29.889815498432725]  [-98.21409100050096   29.884640003341854]  [-98.21405296403519  29.881741788407666]]]     \"\"type\"\": \"\"Polygon\"\"}\"\n13.310684  144.736799463;\"{\"\"coordinates\"\": [[[144.74050133252663   13.310010427767008]  [144.7405013603744    13.30973491498884]  [144.7405016460386    13.307058682780797]  [144.73679989806027   13.307058286770022]  [144.733098159065     13.307057834810683]  [144.73309767307646   13.31068323745712]  [144.7330971772064    13.314308639156133]  [144.73679902579607   13.314309070121853]  [144.74050088336895   13.314309446014882]  [144.74050133252663  13.310010427767008]]]     \"\"type\"\": \"\"Polygon\"\"}\"\n38.760289  -104.301342147;\"{\"\"coordinates\"\": [[[-104.3037858883342  38.781215702234775]  [-104.30348866455277  38.76687622422326]  [-104.29908696906791  38.76691106643378]   [-104.29858255156117  38.75036433784128]   [-104.30319186477617  38.75033028410978]   [-104.30369826396647  38.76687460696151]  [-104.30399642558903  38.78121306359585]   [-104.30428333940594  38.795705506983]     [-104.30407363488939  38.79570815838814]   [-104.3037858883342  38.781215702234775]]]     \"\"type\"\": \"\"Polygon\"\"}\"\n39.823370  -89.6708742707;\"{\"\"coordinates\"\": [[[-89.66858233781238  39.83064753161304]   [-89.66842497722912   39.81974738310147]  [-89.66839715370982   39.81781897541764]   [-89.6683724500395    39.81610674313765]   [-89.67313007690454   39.81606001154887]   [-89.67313228586183   39.81620299588274]  [-89.6733774864085    39.827663902287256]  [-89.67339565124186   39.83025113394826]   [-89.67221159174736   39.83068336257657]   [-89.66858233781238  39.83064753161304]]]      \"\"type\"\": \"\"Polygon\"\"}\"\nName: Geo Point;Geo Shape;OBJECTID_1;OBJECTID;COMPONENT;Site Name;Joint Base;State Terr;COUNTRY;Oper Stat;PERIMETER;AREA;Shape_Leng;Shape_Area, dtype: object\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the military bases data\nmilitary_bases = pd.read_csv(\"../data/military-bases.csv\", sep=';', on_bad_lines='skip')\n\n# Split the Geo Point column into latitude and longitude\nmilitary_bases[['latitude', 'longitude']] = military_bases['Geo Point'].str.split(',', expand=True).astype(float)\n\n# Create the scatter plot\nplt.figure(figsize=(15, 10))\nplt.scatter(military_bases['longitude'], military_bases['latitude'], \n           alpha=0.5, c='red', s=50)\nplt.title('Military Bases Locations')\nplt.xlabel('Longitude')\nplt.ylabel('Latitude')\nplt.grid(True)\n\n# Set axis limits for US\nplt.xlim(-130, -65)\nplt.ylim(25, 50)\n\n# Add state labels for some major bases\nfor idx, row in military_bases.head(10).iterrows():\n    plt.annotate(row['State Terr'], \n                (row['longitude'], row['latitude']),\n                xytext=(5, 5), textcoords='offset points')\n\nplt.show()\n\n# Print some statistics\nprint(\"Number of military bases:\", len(military_bases))\nprint(\"\\nCoordinate ranges:\")\nprint(\"Latitude range:\", military_bases['latitude'].min(), \"to\", military_bases['latitude'].max())\nprint(\"Longitude range:\", military_bases['longitude'].min(), \"to\", military_bases['longitude'].max())\n\n\n\n\n\n\n\n\nNumber of military bases: 776\n\nCoordinate ranges:\nLatitude range: 13.3106836826 to 71.3217290437\nLongitude range: -161.767465275 to 174.107140074\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the military bases data\nmilitary_bases = pd.read_csv(\"../data/military-bases.csv\", sep=';', on_bad_lines='skip')\n\n# Split the Geo Point column into latitude and longitude\nmilitary_bases[['latitude', 'longitude']] = military_bases['Geo Point'].str.split(',', expand=True).astype(float)\n\n# Create a cleaner DataFrame with just the essential columns\nclean_military_bases = military_bases[['Site Name', 'COMPONENT', 'State Terr', 'COUNTRY', 'Oper Stat', 'latitude', 'longitude']]\n\n# Rename columns to be more readable\nclean_military_bases = clean_military_bases.rename(columns={\n    'Site Name': 'site_name',\n    'COMPONENT': 'component',\n    'State Terr': 'state',\n    'COUNTRY': 'country',\n    'Oper Stat': 'operational_status'\n})\n\n# Save to a new CSV file\nclean_military_bases.to_csv('../data/clean_military_bases.csv', index=False)\n\n# Print the first few rows of the clean data\nprint(\"Clean military bases data:\")\nprint(clean_military_bases.head())\n\n# Print the shape of the clean data\nprint(\"\\nShape of clean data:\", clean_military_bases.shape)\n\nClean military bases data:\n                      site_name    component       state        country  \\\n0           Allen Stagefield AL  Army Active     Alabama  United States   \n1      Louisville Stagefield AL  Army Active     Alabama  United States   \n2  White Sands Missile Range NM  Army Active  New Mexico  United States   \n3                   Fort Monroe  Army Active    Virginia  United States   \n4                MCB Camp Smith    MC Active      Hawaii  United States   \n\n  operational_status   latitude   longitude  \n0             Active  31.230999  -85.650635  \n1             Active  31.815733  -85.649798  \n2             Active  33.159464 -106.425696  \n3           Inactive  37.013020  -76.304376  \n4             Active  21.386628 -157.905641  \n\nShape of clean data: (776, 7)"
  }
]